config {type:"operations"}

DECLARE startdate TIMESTAMP DEFAULT "2018-10-03 00:00:00 UTC";
DECLARE NDAYS INT64 DEFAULT 30;

--Make indexed table to speed up the process of joining counting retention rate
/*
CREATE TABLE test-data-floodit.test1.t1
PARTITION BY DATE(day)
CLUSTER BY user_pseudo_id
OPTIONS(description="Implementing retention analysis", require_partition_filter=true)
AS (SELECT TIMESTAMP_TRUNC(TIMESTAMP_MICROS(event_timestamp),DAY) day, user_pseudo_id
  FROM  ${ref("events_*")})
;
*/

--Create set with data in respect that we need first 30 days for the first date, to reflect data correctly
daysN AS(

SELECT *, EXTRACT(MONTH FROM day) m  FROM data
WHERE day>=DATE_ADD(STARTDATE, INTERVAL-76 DAY)
GROUP BY day,user_pseudo_id
ORDER BY day ASC -- 19.07  stopday
),

--Create table including whole range of analysing data
days60 AS(
  SELECT *, EXTRACT(MONTH FROM day) m  FROM data
  WHERE day>=DATE_ADD(STARTDATE, INTERVAL -106 DAY)
  GROUP BY day,user_pseudo_id
ORDER BY day ASC
),

--Set of final range of data
stopdays AS(
  SELECT DISTINCT DATE_TRUNC(day,DAY) stopday FROM data
 WHERE day>=DATE_ADD(STARTDATE, INTERVAL-76 DAY)
 GROUP BY stopday,user_pseudo_id
ORDER BY stopday ASC
),

--Find MAU monthly active users
maus AS(
  SELECT stopday,COUNT(DISTINCT(d6.user_pseudo_id)) AS mau
  FROM days60 as d6 
  JOIN stopdays
  ON day 
  BETWEEN DATE_ADD(stopday , INTERVAL -NDAYS DAY) AND stopday 
  GROUP BY stopday
 ),


--Find monthly active users were active along 30 days week ago
uc as(
SELECT curent.m as m, 
       COUNT(DISTINCT(curent.user_pseudo_id)) as uc_param
FROM days60 as curent
INNER JOIN days60 as previous
ON previous.user_pseudo_id=curent.user_pseudo_id AND previous.m=curent.m-1
GROUP BY curent.m
ORDER BY curent.m ASC
),

-- Find active users current week
up as(
SELECT m,
      COUNT(DISTINCT(user_pseudo_id)) as up_param
FROM days60 as d60
GROUP BY m  
ORDER BY m ASC
)
,
-- Find retention rate dividing  UC/UP. 
--Take an account that RR of July and October have no value(ignore them) because of days quantity, in those months they are incomplete.
ret_rate AS(
  SELECT uc.m,uc.uc_param,up.up_param,ROUND(COALESCE(uc.uc_param/up.up_param,1),2) ret_rate_param
  FROM up
  JOIN uc
  ON up.m=uc.m-1
  ORDER BY up.m
)
,
growth_rate_month as (
  SELECT curent.m m,ROUND((curent.up_param-previous.up_param)/previous.up_param,2)  as growth_rate
  FROM up previous
  JOIN up curent
  ON previous.m=curent.m-1
  ORDER BY curent.m
)
             

-- Find DAU and DAU/MAU, retention_rate in a month-over-month, growth rate 
 SELECT b.m month,prev_mau,retention_rate_month, growth_rate_month
 FROM (SELECT a.m,
      (SELECT up_mau FROM ret_rate WHERE a.m=ret_rate.m-1) as prev_mau,
      (SELECT ret_rate_param FROM ret_rate WHERE a.m=ret_rate.m) as retention_rate_month,
      (SELECT growth_rate FROM growth_rate_month WHERE a.m=growth_rate_month.m) as growth_rate_month
      FROM daysN a
      GROUP BY a.m
      ORDER BY a.m
         ) b
    ORDER BY m ASC;